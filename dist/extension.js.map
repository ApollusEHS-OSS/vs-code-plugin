{"version":3,"sources":["../webpack/bootstrap",".././src/extension.ts","../external \"vscode\""],"names":[],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/extension.ts\");\n","import * as vscode from 'vscode';\n// import * as express from 'express';\nimport { resolveCliPathFromVSCodeExecutablePath } from 'vscode-test';\nimport { pathToFileURL, fileURLToPath } from 'url';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\n//port should be variable to listen for action in the user's active terminal\nconst PORT = 6006;\nconst host = 'localhost';\n// const server = express();\n\nexport function activate(context: vscode.ExtensionContext) {\n\t// server.get('/', (req, res) => {\n\t// \tvscode.window.showInformationMessage('Aesop server online');\n\t// \tres.end();\n\t// });\n\t// server.listen(PORT);\n\n\t//create disposable variable type, registers awaken command & opens webview\n\tlet disposable = vscode.commands.registerCommand('extension.aesopAwaken', () => {\n\n\t\t//still inside our disposable variable, let's create the webview panel\n\t\tconst panel : vscode.WebviewPanel = vscode.window.createWebviewPanel(\n\t\t\t'aesop-sb',\n\t\t\t'Aesop',\n\t\t\tvscode.ViewColumn.Three,\n\t\t\t{\n\t\t\t\tenableCommandUris: true,\n\t\t\t\tenableScripts: true,\n\t\t\t\t// portMapping: [\n\t\t\t\t// \t{ webviewPort: 6006, extensionHostPort: 9009}\n\t\t\t\t// ]\n\t\t\t}\n\t\t);\n\n\t\tpanel.webview.html =\n\t\t\t`<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t\t<head>\n\t\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t\t<title>Aesop</title>\n\t\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t\t<iframe src=\"http://localhost:6006/?path=/story/welcome--to-storybook\" sandbox=\"allow-scripts\" style=\"width:1200px; height:500px\">\n\t\t\t\t\t<script>\n\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\tconsole.log(\"Here is a script running in the iframe. Version 12/30/2019\");\n\t\t\t\t\t}, 10000);\n\t\t\t\t\t</script>\n\t\t\t\t\t</iframe>\n\t\t\t\t</body>\n\t\t\t</html>`;\n\t\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n\n\t\n// to-do:\n\t// figure out how to iteratively call sb scripts within our webview\n\t// webview messages / scripts to reload\n\t// figure out how to use a tsx rule in webpack to execute scripts\n\t// signal babel to interpret this block as tsx, e.g. something like: //@tsx babel//\n\n\t// //declare an empty array (of strings) to push our scripts to during the next part\n\t\t// const scriptArray : Array<string> = [];\n\t\t// //define a path to the root working directory of the user\n\t\t// const rootDir = fileURLToPath(vscode.workspace.workspaceFolders[0].uri.toString(true));\n\t\t// //now let's read SB's outputted index.html file, and parse out what we need\n\t\t// fs.readFile(path.join(rootDir, '/node_modules/@storybook/core/dist/public/index.html'), (err, data) => {\n\t\t// \tif (err) console.error(err);\n\t\t// \telse {\n\t\t// \t\t//if we've read the HTML file, take its contents and stringify it\n\t\t// \t\tlet outputFile = data.toString();\n\t\t// \t\t// this log shows what our eventual permutations would look like as we carve out the scripts\n\t\t// \t\t// vscode.window.showWarningMessage(`what's in it: ${outputFile.slice(outputFile.indexOf('<body>')+6, outputFile.indexOf('</body>'))} \\n`)\n\t\t// \t\t//split out the body section of the retrieved html file\n\t\t// \t\toutputFile = outputFile.slice(outputFile.indexOf('<body>')+6, outputFile.indexOf('</body>'));\n\t\t// \t\tvscode.window.showWarningMessage(`${outputFile} \\n`)\n\n\t\t// \t\t//this loop will peel out all the scripts so long as there are any to rip out\n\t\t// \t\twhile (outputFile.includes(`\"<script src=`)){\n\t\t// \t\t\t//we push just what we need (the src attributes), leaving the <script>...</script> tags behind\n\t\t// \t\t\tlet temp = outputFile.slice(outputFile.indexOf(`<script src=\"`)+12, outputFile.indexOf(`\"></script>`));\n\t\t// \t\t\tscriptArray.push(temp);\n\t\t// \t\t\toutputFile = outputFile.slice(outputFile.indexOf(`\"></script>`)+10);\n\t\t// \t\t}\n\t\t// \t};\n\t\t// });\n\n// <div id=\"root\"></div>\n// <div id=\"docs-root\"></div>\t\n// \t<div id=\"scriptExecute\">\n// \t<script>window.acquireVsCodeApi = acquireVsCodeApi();</script>\n// \t<script>window['DOCS_MODE'] = false;</script>\n// \t<script>\n// \t\t${\n// \t\t\tscriptArray.map( (el) => {\n// \t\t\t\tif (el.includes(\"./sb_dll\")){\n// \t\t\t\t\tlet uiScript = document.createElement(\"script\");\n// \t\t\t\t\tuiScript.async = true;\n// \t\t\t\t\tuiScript.defer = true;\n// \t\t\t\t\tuiScript.referrerPolicy = \"origin\";\n// \t\t\t\t\tuiScript.src = path.join(rootDir, `/node_modules/@storybook/core/dll/${el}`);\n// \t\t\t\t\tdocument.getElementById(\"scriptExecute\").appendChild(uiScript);\n// \t\t\t\t}\telse {\n// \t\t\t\t\tlet capturedScript = document.createElement(\"script\");\n// \t\t\t\t\tcapturedScript.async = true;\n// \t\t\t\t\tcapturedScript.defer = true;\n// \t\t\t\t\tcapturedScript.referrerPolicy = \"origin\";\n// \t\t\t\t\tcapturedScript.src = path.join(rootDir, `/node_modules/@storybook/core/dist/public/${el}`);\n// \t\t\t\t\tdocument.getElementById(\"scriptExecute\").appendChild(capturedScript);\n// \t\t\t\t}\n// \t\t\t})\n// \t\t}\n// \t</script>\n// </div>\n\n\t// disposable = vscode.commands.registerCommand('extension.getStories', () => {\n\t\t//build a command that retrieves Storybook files on startup\n\t\t//can be executed later if Storybook server is spun up after the extension opens\n\t\t\n\t\t//also register this command at startup to crawl the file path\n\t\t// ${vscode.commands.executeCommand('extension.getStories')}\n\t\t// vscode.window.showInformationMessage('Aesop is reading from your Storybook.');\n\n\t\t//define a path to SB webpack bundle outputs (in user workspace /node_modules/ folder)\n\t\t// if (vscode.workspace.workspaceFolders[0] !== undefined){\n\t\t// \tconst distGlob = new vscode.RelativePattern(vscode.workspace.workspaceFolders[0], \"**/node_modules/@storybook/core/dist/public\");\n\t\t// \t//instantiate a watcher to listen for fs path changes (e.g. file creation/update)\n\t\t// \t//bools = options for ignoreCreateEvents?, ignoreChangeEvents?, ignoreDeleteEvents?\t\n\t\t// \tconst observer = vscode.workspace.createFileSystemWatcher(distGlob, false, false, false);\n\t\t// \t// observer.onDidChange = /*resolve*/;\t\t// observer.onDidCreate = /*resolve*/;\n\t\t// \t//extract index.html file that outputs into SB's preview pane\n\t\t// \tconst htmlGlob = new vscode.RelativePattern(vscode.workspace.workspaceFolders[0], \"*/node_modules/@storybook/core/dist/public/*.html\");\n\t\t// \t//extract necessary bundle scripts to leverage in-app dependencies\n\t\t// \tconst scriptGlob = new vscode.RelativePattern(vscode.workspace.workspaceFolders[0], \"*/node_modules/@storybook/core/dist/public/*.js\");\n\n\t\t// \tconsole.log(vscode.Uri.file(fileURLToPath(`/node_modules/@storybook/core/dist/public`)));\n\n\t\t// \t//do we need to resolve the Storybook UI script from the /dll/ folder?\n\t\t// \t//if extract methods above fail, determine logic to parse out HTML/.js scripts (index 0?);\n\t\t// \t//retrieve files with findFiles/relativeFilePath\n\t\t// \tconst arrayOfScripts = vscode.workspace.findFiles(distGlob, null, 100);\n\t\t// \t//dev check: have we successfully pulled down script files?\n\t\t// \t//if so, should we then store them locally, or is there no point?\n\t\t// \tif (arrayOfScripts !== undefined){\n\t\t// \t\tvscode.window.showInformationMessage(\"Hey, dog: \" + `${arrayOfScripts}`);\n\t\t// \t}\n\n\t\t// \tvscode.window.showInformationMessage(`\n\t\t// \trootPath: ${vscode.workspace.workspaceFolders[0]},\n\t\t// \tvscode.Uri: ${vscode.Uri},\n\t\t// \tworkspace: ${vscode.workspace},\n\t\t// \tdistGlob: ${distGlob.toString()},\n\t\t// \thtmlGlob: ${htmlGlob.toString()},\n\t\t// \tscriptGlob: ${scriptGlob.toString()}\n\t\t// \t`);\n\t\t// };\n\n\t\t// vscode.window.showInformationMessage(`\n\t\t// \trootPath: ${vscode.workspace.workspaceFolders[0].uri.toString()},\\n\n\t\t// \tvscode URI parseTest: ${vscode.Uri.parse('file://'+ '/node_modules/@storybook/core/dist/public/index.html')},\\n\n\t\t// \tvscode URI parsed w escape: ${vscode.Uri.parse('file://'+ '/node_modules/\\@storybook/core/dist/public/index.html')},\\n\n\t\t// \tvscode URI  file Test: ${vscode.Uri.file('node_modules/@storybook/core/dist/public/index.html')}\n\t\t// \t`);\n\t\t\t\n\t\t// console.log(`\n\t\t// rootPath: ${vscode.workspace.workspaceFolders[0]},\n\t\t// vscode.Uri: ${vscode.Uri},\n\t\t// workspace: ${vscode.workspace},\n\t\t// fileSys: ${vscode.Uri.file(path.join('/'))}`);\n\t// });","module.exports = require(\"vscode\");"],"sourceRoot":""}